# Generated by Django 4.2.1 on 2023-05-18 08:54

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('address', models.CharField(max_length=50)),
                ('number', models.CharField(max_length=15)),
                ('birth_date', models.DateTimeField()),
                ('status', models.CharField(choices=[('CRE', 'CREATED'), ('COM', 'COMPLETED'), ('DEL', 'DELETED')], max_length=3)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task', models.CharField(max_length=200)),
                ('commands', models.CharField(max_length=200)),
                ('name', models.CharField(max_length=200)),
                ('description', models.CharField(max_length=200)),
                ('award', models.CharField(max_length=200)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Command',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('command_name', models.CharField(max_length=200)),
                ('open_to_invite', models.BooleanField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('awards', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gateway.award')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contest', models.CharField(max_length=200)),
                ('task_name', models.CharField(max_length=200)),
                ('task_description', models.CharField(max_length=200)),
                ('description', models.CharField(max_length=200)),
                ('awards', models.CharField(max_length=200)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Subscribe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.CharField(max_length=200)),
                ('cost', models.IntegerField()),
                ('type', models.CharField(choices=[('MON', 'MONTHLY'), ('YEA', 'YEARLY'), ('FOR', 'FOREVER')], max_length=3)),
                ('users', models.ManyToManyField(to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('CRE', 'CREATED'), ('COM', 'COMPLETED'), ('DEL', 'DELETED')], max_length=3)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('command', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solution_to_command', to='gateway.command')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='command_to_task', to='gateway.task')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.CharField(max_length=100)),
                ('marr', models.IntegerField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('command', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_to_command', to='gateway.command')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='Invite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('CRE', 'CREATED'), ('COM', 'COMPLETED'), ('DEL', 'DELETED')], max_length=3)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('command', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invite_to_command', to='gateway.command')),
                ('invited', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invited_to_user', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('inviter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inviter_to_user', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('status', models.CharField(choices=[('CRE', 'CREATED'), ('COM', 'COMPLETED'), ('DEL', 'DELETED')], max_length=3)),
                ('description', models.CharField(max_length=200)),
                ('reg_start', models.DateTimeField()),
                ('reg_end', models.DateTimeField()),
                ('date_start', models.DateTimeField()),
                ('date_end', models.DateTimeField()),
                ('logo', models.CharField(max_length=50)),
                ('participant_cap', models.IntegerField()),
                ('command_min', models.IntegerField()),
                ('command_max', models.IntegerField()),
                ('region', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('number', models.CharField(max_length=15)),
                ('commands', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contest_to_command', to='gateway.command')),
                ('contest_admins', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admins_to_user', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gateway.contest')),
                ('participants', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants_to_user', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('tags', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contest_to_tag', to='gateway.tag')),
                ('tasks', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contest_to_task', to='gateway.task')),
            ],
        ),
        migrations.AddField(
            model_name='command',
            name='contest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='command_to_contest', to='gateway.contest'),
        ),
        migrations.AddField(
            model_name='command',
            name='invites',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='command_to_invite', to='gateway.invite'),
        ),
        migrations.AddField(
            model_name='command',
            name='participants',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='command',
            name='review',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='command_to_review', to='gateway.review'),
        ),
        migrations.AddField(
            model_name='command',
            name='solutions',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='command_to_solution', to='gateway.solution'),
        ),
        migrations.AddField(
            model_name='command',
            name='tags',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='command_to_tag', to='gateway.tag'),
        ),
        migrations.AddField(
            model_name='user',
            name='contests',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gateway.contest'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='subscribes',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gateway.subscribe'),
        ),
        migrations.AddField(
            model_name='user',
            name='tags',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_to_tag', to='gateway.tag'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
